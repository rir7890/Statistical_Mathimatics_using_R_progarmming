# Add a vertical line for the median
abline(v = median_value, col = "blue", lwd = 2)
# Add a vertical line for the mode
abline(v = mode_value, col = "green", lwd = 2)
# Add a legend
legend("topright", legend = c("Mean", "Median", "Mode"), col = c("red", "blue", "green"), lwd = 2)
# Plot empirical probabilities
barplot(empirical_probabilities, names.arg = 1:10, ylim = c(0, 1), col = "red", main = "Empirical Probabilities")
# RahulKumar (20BCS7081) ranging from 1 to 10
simulated_rolls <- sample(1:10, size = 1000, replace = TRUE)
# Define the sample space (possible outcomes)
sample_space <- 1:10
# Define the event of interest (rolling a 1 to 10)
event_of_interest <- 4
# Calculate the theoretical probability
probability_of_event <- table(sample_space) / length(sample_space)
# Calculate empirical probabilities
empirical_probabilities <- table(simulated_rolls) / length(simulated_rolls)
# Plot theoretical probabilities
barplot(probability_of_event, names.arg = 1:10, ylim = c(0, 1), col = "blue", main = "Theoretical Probabilities")
# Plot empirical probabilities
barplot(empirical_probabilities, names.arg = 1:10, ylim = c(0, 1), col = "red", main = "Empirical Probabilities")
# Calculate the quartile deviation
qdev_value <- IQR(data) / 2
# Rahul Kumar(20BCS7081)
data <- c(5, 2, 7, 3, 5, 8, 1, 6, 4, 52,23,21)
# Calculate the range
range_value <- range(data)
# Calculate the quartile deviation
qdev_value <- IQR(data) / 2
# Calculate the standard deviation
sd_value <- sd(data)
# Calculate the variance
variance_value <- var(data)
# Create a boxplot for the dataset
boxplot(data, main = "Boxplot of the Dataset", col = "lightblue", border = "black")
# Add text annotations for each measure of dispersion
text(1, min(data) + 5, paste("Range: ", diff(range_value)), col = "red")
text(1, min(data) + 10, paste("Quartile Deviation: ", qdev_value), col = "blue")
text(1, min(data) + 15, paste("Standard Deviation: ", sd_value), col = "green")
text(1, min(data) + 20, paste("Variance: ", variance_value), col = "purple")
# Rahul Kumar(20BCS7081)
data <- c(5, 2, 7, 3, 5, 8, 1, 6, 4, 12,13,11)
# Calculate the range
range_value <- range(data)
# Calculate the quartile deviation
qdev_value <- IQR(data) / 2
# Calculate the standard deviation
sd_value <- sd(data)
# Calculate the variance
variance_value <- var(data)
# Create a boxplot for the dataset
boxplot(data, main = "Boxplot of the Dataset", col = "lightblue", border = "black")
# Add text annotations for each measure of dispersion
text(1, min(data) + 5, paste("Range: ", diff(range_value)), col = "red")
text(1, min(data) + 10, paste("Quartile Deviation: ", qdev_value), col = "blue")
text(1, min(data) + 15, paste("Standard Deviation: ", sd_value), col = "green")
text(1, min(data) + 20, paste("Variance: ", variance_value), col = "purple")
# Rahul Kumar(20BCS7081)
data <- c(5, 2, 7, 3, 5, 8, 1, 6, 4, 17,13,11)
# Calculate the range
range_value <- range(data)
# Calculate the quartile deviation
qdev_value <- IQR(data) / 2
# Calculate the standard deviation
sd_value <- sd(data)
# Calculate the variance
variance_value <- var(data)
# Create a boxplot for the dataset
boxplot(data, main = "Boxplot of the Dataset", col = "lightblue", border = "black")
# Add text annotations for each measure of dispersion
text(1, min(data) + 5, paste("Range: ", diff(range_value)), col = "red")
text(1, min(data) + 10, paste("Quartile Deviation: ", qdev_value), col = "blue")
text(1, min(data) + 15, paste("Standard Deviation: ", sd_value), col = "green")
text(1, min(data) + 20, paste("Variance: ", variance_value), col = "purple")
# Rahul Kumar(20BCS7081)
data <- c(5,2,7,3,5,8,1,6,4,5,15,23)
# Calculate the range
range_value <- range(data)
# Calculate the quartile deviation
qdev_value <- IQR(data) / 2
# Calculate the standard deviation
sd_value <- sd(data)
# Calculate the variance
variance_value <- var(data)
# Create a boxplot for the dataset
boxplot(data, main = "Boxplot of the Dataset", col = "lightblue", border = "black")
# Add text annotations for each measure of dispersion
text(1, min(data) + 5, paste("Range: ", diff(range_value)), col = "red")
text(1, min(data) + 10, paste("Quartile Deviation: ", qdev_value), col = "blue")
text(1, min(data) + 15, paste("Standard Deviation: ", sd_value), col = "green")
text(1, min(data) + 20, paste("Variance: ", variance_value), col = "purple")
# RahulKumar (20BCS7081) ranging from 1 to 10
simulated_rolls <- sample(1:10, size = 1000, replace = TRUE)
# Define the sample space (possible outcomes)
sample_space <- 1:10
# Define the event of interest (rolling a 1 to 10)
event_of_interest <- 4
# Calculate the theoretical probability
probability_of_event <- table(sample_space) / length(sample_space)
# Calculate empirical probabilities
empirical_probabilities <- table(simulated_rolls) / length(simulated_rolls)
# Plot theoretical probabilities
barplot(probability_of_event, names.arg = 1:10, ylim = c(0, 1), col = "blue", main = "Theoretical Probabilities")
# Plot empirical probabilities
barplot(empirical_probabilities, names.arg = 1:10, ylim = c(0, 1), col = "red", main = "Empirical Probabilities")
# RahulKumar (20BCS7081) ranging from 1 to 10
simulated_rolls <- sample(1:10, size = 1000, replace = TRUE)
# Define the sample space (possible outcomes)
sample_space <- 1:10
# Define the event of interest (rolling a 1 to 10)
event_of_interest <- 4
# Calculate the theoretical probability
probability_of_event <- table(sample_space) / length(sample_space)
# Calculate empirical probabilities
empirical_probabilities <- table(simulated_rolls) / length(simulated_rolls)
# Plot theoretical probabilities
barplot(probability_of_event, names.arg = 1:10, ylim = c(0, 1), col = "blue", main = "Theoretical Probabilities")
# Plot empirical probabilities
barplot(empirical_probabilities, names.arg = 1:10, ylim = c(0, 1), col = "red", main = "Empirical Probabilities")
random_index <- sample(1:100, 1) + 1  # Add 1 to the random index to start from 1
random_number <- numbers[random_index]
random_index <- sample(1:100, 1) + 1  # Add 1 to the random index to start from 1
random_number <- numbers[random_index]
random_index <- sample(1:100, 1) + 1  # Add 1 to the random index to start from 1
random_number <- numbers[random_index]
random_index <- sample(1:100, 1) + 1
random_number <- numbers[random_index]
random_index <- sample(1:100, 1) + 1  # Add 1 to the random index to start from 1
#random_number <- numbers[random_index]
print(random_number)
random_number <- sample(1:100, 1) + 1  # Add 1 to the random index to start from 1
#random_number <- numbers[random_index]
print(random_number)
random_number <- sample(1:100, 1) + 1  # Add 1 to the random index to start from 1
#random_number <- numbers[random_index]
print(random_number)
random_number <- sample(1:100, 1) + 1  # Add 1 to the random index to start from 1
#random_number <- numbers[random_index]
print(random_number)
# RahulKumar (20BCS7081) ranging from 1 to 10
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Theoretical probabilities for rolling a fair six-sided die
theoretical_probabilities <- rep(1/6, 6)
# Plotting the results
barplot(rbind(probabilities, theoretical_probabilities),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "red"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.25))
# RahulKumar (20BCS7081) ranging from 1 to 10
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Theoretical probabilities for rolling a fair six-sided die
theoretical_probabilities <- rep(1/6, 6)
# Plotting the results
barplot(rbind(probabilities, theoretical_probabilities),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "red"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.25))
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Theoretical probabilities for rolling a fair six-sided die
theoretical_probabilities <- rep(1/6, 6)
# Plotting the results
barplot(rbind(probabilities, theoretical_probabilities),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "red"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.25))
install.packages(c("data.table", "DescTools"))
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Theoretical probabilities for rolling a fair six-sided die
theoretical_probabilities <- rep(1/6, 6)
# Plotting the results
barplot(rbind(probabilities, theoretical_probabilities),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "red"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.25))
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Define new theoretical probabilities (for example purposes)
new_theoretical_probs <- c(0.1, 0.15, 0.2, 0.25, 0.2, 0.1)
# Plotting the results with new theoretical probabilities
barplot(rbind(probabilities, new_theoretical_probs),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "red"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.3))
# Load required libraries
library(ggplot2)
# Function to plot histograms
plot_histogram <- function(data, title) {
ggplot(data, aes(x = value)) +
geom_histogram(binwidth = 1, fill = "skyblue", color = "black", aes(y = ..count../sum(..count..)), alpha = 0.8) +
labs(title = title, x = "Value", y = "Probability") +
theme_minimal()
}
# Bernoulli Distribution Simulation
set.seed(123)  # Set seed for reproducibility
p <- 0.3  # Probability of success
# Generate 1000 samples from Bernoulli distribution
bernoulli_samples <- rbinom(1000, 1, p)
# Analyze distribution
bernoulli_mean <- mean(bernoulli_samples)
bernoulli_var <- var(bernoulli_samples)
# Plot histogram
plot_histogram(data.frame(value = bernoulli_samples), "Bernoulli Distribution")
# Binomial Distribution Simulation
n <- 10  # Number of trials
p <- 0.3  # Probability of success
# Generate 1000 samples from Binomial distribution
binomial_samples <- rbinom(1000, n, p)
# Analyze distribution
binomial_mean <- mean(binomial_samples)
binomial_var <- var(binomial_samples)
# Plot histogram
plot_histogram(data.frame(value = binomial_samples), "Binomial Distribution")
# Poisson Distribution Simulation
lambda <- 3  # Average rate of events per unit time or space
# Generate 1000 samples from Poisson distribution
poisson_samples <- rpois(1000, lambda)
# Analyze distribution
poisson_mean <- mean(poisson_samples)
poisson_var <- var(poisson_samples)
# Plot histogram
plot_histogram(data.frame(value = poisson_samples), "Poisson Distribution")
# Summary of distributions
distribution_summary <- data.frame(
Distribution = c("Bernoulli", "Binomial", "Poisson"),
Mean = c(bernoulli_mean, binomial_mean, poisson_mean),
Variance = c(bernoulli_var, binomial_var, poisson_var)
)
print(distribution_summary)
library(dplyr)
# Load the dataset
data <- read.csv("C:/Users/prasa/OneDrive/Desktop/Rexperiment/HeightWeight.csv")
# Simple Random Sampling
srs_sample <- data %>% sample_n(size = 100)
# Stratified Sampling
strati <- data %>% group_by(State) %>% slice_sample(n = 50, replace = TRUE)
install.packages("dplyr")
library(dplyr)
# Load the dataset
data <- read.csv("C:/Users/prasa/OneDrive/Desktop/Rexperiment/HeightWeight.csv")
# Simple Random Sampling
srs_sample <- data %>% sample_n(size = 100)
# Stratified Sampling
strati <- data %>% group_by(State) %>% slice_sample(n = 50, replace = TRUE)
# Generate a random population
population <- rnorm(1000)
# Perform simple random sampling
sampled_data <- sample(population, size = 100, replace = FALSE)
# Assess accuracy of parameter estimation
mean_difference <- mean(population) - mean(sampled_data)
cat("Mean difference:", mean_difference, "\n")
# Install and load the sampling package
install.packages("sampling")
library(sampling)
# Generate data with strata
strata <- rep(1:5, each = 200)
population <- rnorm(1000)
strata_sample <- strata(data.frame(strata), size = c(50, 50, 50, 50, 50), method = "srswor")
# Generate a random population
population <- rnorm(1000)
# Perform simple random sampling
sampled_data <- sample(population, size = 100, replace = FALSE)
# Assess accuracy of parameter estimation
mean_difference <- mean(population) - mean(sampled_data)
cat("Mean difference:", mean_difference, "\n")
# Generate data with strata
strata <- rep(1:5, each = 200)
population <- rnorm(1000)
strata_sample <- strata(data.frame(strata), size = c(50, 50, 50, 50, 50), method = "srswor")
clusters <- rep(1:50, each = 20)
population <- rnorm(1000)
# Randomly select clusters
selected_clusters <- sample(unique(clusters), 5)
# Perform cluster sampling
sampled_data <- population[clusters %in% selected_clusters]
# Assess accuracy of parameter estimation
mean_difference <- mean(population) - mean(sampled_data)
cat("Mean difference:", mean_difference, "\n")
# Generate a random population
population <- rnorm(1000)
# Perform convenience sampling (e.g., first 100 individuals)
sampled_data <- population[1:100]
# Assess accuracy of parameter estimation
mean_difference <- mean(population) - mean(sampled_data)
cat("Mean difference:", mean_difference, "\n")
# Load necessary libraries
library(tidyverse)
#  1: t-test for comparing means
group1 <- c(22, 26, 24, 31, 29)
group2 <- c(18, 21, 17, 23, 26)
t_test_result <- t.test(group1, group2)
#  2: Z-test for proportions
successes <- 18
total_trials <- 45
prop_test_result <- prop.test(successes, total_trials, alternative = "two.sided")
#  3: Chi-Square test for independence
data <- matrix(c(28, 19, 14, 23), nrow = 2, byrow = TRUE)
chi_square_result <- chisq.test(data)
# Print results
print(t_test_result)
print(prop_test_result)
print(chi_square_result)
# Load necessary libraries
library(tidyverse)
#  1: t-test for comparing means
group1 <- c(22, 26, 24, 31, 29)
group2 <- c(18, 21, 17, 23, 26)
t_test_result <- t.test(group1, group2)
#  2: Z-test for proportions
successes <- 18
total_trials <- 45
prop_test_result <- prop.test(successes, total_trials, alternative = "two.sided")
#  3: Chi-Square test for independence
data <- matrix(c(28, 19, 14, 23), nrow = 2, byrow = TRUE)
chi_square_result <- chisq.test(data)
# Print results
print(t_test_result)
print(prop_test_result)
print(chi_square_result)
# Load necessary libraries
library(tidyverse)
# Scenario 1: One-way ANOVA
group1 <- c(22, 26, 30, 34, 38)
group2 <- c(18, 22, 26, 30, 34)
group3 <- c(14, 18, 22, 26, 30)
one_way_anova_result <- aov(c(group1, group2, group3) ~ rep(c("Group1", "Group2", "Group3"), each = 5))
# Scenario 2: Two-way ANOVA
data <- data.frame(
value = c(group1, group2, group3),
factor1 = rep(c("A", "B", "C"), each = 5),
factor2 = rep(rep(c("X", "Y"), each = 5), times = 3) # Correcting factor2 length
)
two_way_anova_result <- aov(value ~ factor1 * factor2, data = data)
# Print results
print(summary(one_way_anova_result))
print(summary(two_way_anova_result))
#Rahul Kumar (20BCS7081)
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Define new theoretical probabilities (for example purposes)
new_theoretical_probs <- c(0.1, 0.15, 0.2, 0.25, 0.2, 0.1)
# Plotting the results with new theoretical probabilities
barplot(rbind(probabilities, new_theoretical_probs),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "red"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.3))
#Rahul Kumar (20BCS7081)
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Define new theoretical probabilities (for example purposes)
new_theoretical_probs <- c(0.1, 0.15, 0.2, 0.25, 0.2, 0.1)
# Plotting the results with new theoretical probabilities
barplot(rbind(probabilities, new_theoretical_probs),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "red"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.3))
#Rahul Kumar (20BCS7081)
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Define new theoretical probabilities (for example purposes)
new_theoretical_probs <- c(0.1, 0.15, 0.2, 0.25, 0.2, 0.1)
# Plotting the results with new theoretical probabilities
barplot(rbind(probabilities, new_theoretical_probs),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "gray"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.3))
# Install and load the sampling package
install.packages("sampling")
library(sampling)
# Generate data with strata
strata <- rep(1:5, each = 200)
population <- rnorm(1000)
strata_sample <- strata(data.frame(strata), size = c(50, 50, 50, 50, 50), method = "srswor")
#Rahul Kumar (20BCS7081)
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Define new theoretical probabilities (for example purposes)
new_theoretical_probs <- c(0.1, 0.15, 0.2, 0.35, 0.2, 0.1)
# Plotting the results with new theoretical probabilities
barplot(rbind(probabilities, new_theoretical_probs),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "gray"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.3))
#Rahul Kumar (20BCS7081)
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Define new theoretical probabilities (for example purposes)
new_theoretical_probs <- c(0.1, 0.15, 0.2, 0.155, 0.2, 0.1)
# Plotting the results with new theoretical probabilities
barplot(rbind(probabilities, new_theoretical_probs),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "gray"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.3))
#Rahul Kumar (20BCS7081)
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Define new theoretical probabilities (for example purposes)
new_theoretical_probs <- c(0.1, 0.15, 0.2, 0.18, 0.2, 0.1)
# Plotting the results with new theoretical probabilities
barplot(rbind(probabilities, new_theoretical_probs),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "gray"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.3))
#Rahul Kumar (20BCS7081)
# Set the number of simulations
n_simulations <- 10000
# Simulate rolling a fair six-sided die
die_rolls <- sample(1:6, n_simulations, replace = TRUE)
# Calculate the proportion of each outcome
probabilities <- table(die_rolls) / n_simulations
# Define new theoretical probabilities (for example purposes)
new_theoretical_probs <- c(0.1, 0.15, 0.2, 0.21, 0.2, 0.1)
# Plotting the results with new theoretical probabilities
barplot(rbind(probabilities, new_theoretical_probs),
beside = TRUE,
names.arg = 1:6,
col = c("blue", "gray"),
legend.text = c("Simulated", "Theoretical"),
main = "Simulated vs Theoretical Probabilities of Rolling a Fair Six-sided Die",
ylab = "Probability",
ylim = c(0, 0.3))
